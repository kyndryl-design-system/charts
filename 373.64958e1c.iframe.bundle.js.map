{"version":3,"file":"373.64958e1c.iframe.bundle.js","mappings":";;AAmLA;AACA;AACA;;AAEA;;AAGA;;AAGA;;AAEA;;AAIA;;;;AAKA;;AAGA;;;;;AAMA;;;AAGA;AACA;;;AAGA;AACA;;;;;;AAOA;AACA;;AAEA;;;AAGA;;;;;;AAQA;AACA;;;AAGA;;;;AAIA;;AAGA;;AAGA;;;;AAKA;;AAGA;;;AAGA;;AAGA;;;;;;;;;;;;;AAeA;;;AAGA;AACA;;;;;;AAMA;;;;;AAOA;;;;;AAMA;AAGA;;;;AAMA;;AAGA;AAGA;AAMA;AAEA;;AAQA;AAEA;;;AAQA;;;;;;AAQA;;AAIA","sources":["webpack://@kyndryl-design-system/shidoka-charts/./src/components/chart/chart.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, state, query } from 'lit/decorators.js';\nimport { deepmerge, deepmergeCustom } from 'deepmerge-ts';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport {\n  ChoroplethController,\n  BubbleMapController,\n  GeoFeature,\n  ColorScale,\n  SizeScale,\n  ProjectionScale,\n} from 'chartjs-chart-geo';\nimport { TreemapController, TreemapElement } from 'chartjs-chart-treemap';\nimport canvasBackgroundPlugin from '../../common/plugins/canvasBackground';\nimport doughnutLabelPlugin from '../../common/plugins/doughnutLabel';\nimport a11yPlugin from 'chartjs-plugin-a11y-legend';\nimport musicPlugin from 'chartjs-plugin-chart2music';\nimport datalabelsPlugin from 'chartjs-plugin-datalabels';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { convertChartDataToCSV, debounce } from '../../common/helpers/helpers';\nimport ChartScss from './chart.scss';\nimport globalOptions from '../../common/config/globalOptions';\nimport globalOptionsNonRadial from '../../common/config/globalOptionsNonRadial';\nimport globalOptionsRadial from '../../common/config/globalOptionsRadial';\nimport '@kyndryl-design-system/shidoka-foundation/components/icon';\nimport chartIcon from '@carbon/icons/es/chart--line/24';\nimport tableIcon from '@carbon/icons/es/table-of-contents/24';\nimport downloadIcon from '@carbon/icons/es/download/20';\nimport maximizeIcon from '@carbon/icons/es/maximize/20';\nimport minimizeIcon from '@carbon/icons/es/minimize/20';\n\nChart.register(\n  ChoroplethController,\n  BubbleMapController,\n  GeoFeature,\n  ColorScale,\n  SizeScale,\n  ProjectionScale,\n  TreemapController,\n  TreemapElement\n);\n\n/**\n * Chart.js wrapper component.\n * @slot unnamed - Slot for custom content between header and chart.\n * @slot controls - Slot for custom controls such as an overflow menu.\n */\n@customElement('kd-chart')\nexport class KDChart extends LitElement {\n  static override styles = ChartScss;\n\n  /** Chart title. */\n  @property({ type: String })\n  chartTitle = '';\n\n  /** Chart description. */\n  @property({ type: String })\n  description = '';\n\n  /** Chart.js chart type. */\n  @property({ type: String })\n  type: any = '';\n\n  /** Chart.js data.labels. */\n  @property({ type: Array })\n  labels!: Array<string>;\n\n  /** Chart.js data.datasets. */\n  @property({ type: Array })\n  datasets!: Array<any>;\n\n  /** Chart.js options. Can override Shidoka defaults. */\n  @property({ type: Object })\n  options: any = {};\n\n  /** Chart.js additional plugins. Must be registerable inline via Chart.plugins array, not globally via Chart.register. */\n  @property({ type: Array })\n  plugins: any = [];\n\n  /** Chart.js canvas height (px). Disables maintainAspectRatio option. */\n  @property({ type: Number })\n  height: any = null;\n\n  /** Chart.js canvas width (px). Disables maintainAspectRatio option. */\n  @property({ type: Number })\n  width: any = null;\n\n  /** Hides the description visually. */\n  @property({ type: Boolean })\n  hideDescription = false;\n\n  /** Hides the closed captions visually. */\n  @property({ type: Boolean })\n  hideCaptions = false;\n\n  /** Hides the title & description. */\n  @property({ type: Boolean })\n  hideHeader = false;\n\n  /** Hides the controls. */\n  @property({ type: Boolean })\n  hideControls = false;\n\n  /** Removes the outer border and padding. */\n  @property({ type: Boolean })\n  noBorder = false;\n\n  /** Customizable text labels. */\n  @property({ type: Object })\n  customLabels = {\n    toggleView: 'Toggle View Mode',\n    toggleFullscreen: 'Toggle Fullscreen',\n    downloadMenu: 'Download Menu',\n    downloadCsv: 'Download as CSV',\n    downloadPng: 'Download as PNG',\n    downloadJpg: 'Download as JPG',\n  };\n\n  /** Fullscreen state.\n   * @ignore\n   */\n  @state()\n  fullscreen = false;\n\n  /**\n   * Queries the container element.\n   * @ignore\n   */\n  @query('.container')\n  container!: HTMLCanvasElement;\n\n  /**\n   * Queries the canvas element.\n   * @ignore\n   */\n  @query('canvas')\n  canvas!: HTMLCanvasElement;\n\n  /**\n   * Queries the closed caption div.\n   * @ignore\n   */\n  @query('.closed-caption')\n  ccDiv!: HTMLDivElement;\n\n  /** The chart instance.\n   * @ignore\n   */\n  @state()\n  chart: any = null;\n\n  /** Table view mode.\n   * @ignore\n   */\n  @state()\n  tableView = false;\n\n  /** Disable table view feature.\n   * @ignore\n   */\n  @state()\n  tableDisabled = false;\n\n  /** Merged options.\n   * @ignore\n   */\n  @state()\n  mergedOptions: any = {};\n\n  /** Merged datasets.\n   * @ignore\n   */\n  @state()\n  mergedDatasets: any = {};\n\n  override render() {\n    return html`\n      <div\n        class=\"container ${this.fullscreen ? 'fullscreen' : ''}\n          ${this.noBorder ? 'no-border' : ''}\"\n        @fullscreenchange=${() => this.handleFullscreenChange()}\n      >\n        ${!this.hideHeader || !this.hideControls\n          ? html`\n              <div class=\"header\">\n                ${!this.hideHeader\n                  ? html`\n                      <div id=\"titleDesc\">\n                        <div class=\"title\">${this.chartTitle}</div>\n                        <div\n                          class=\"description ${this.hideDescription\n                            ? 'hidden-visually'\n                            : ''}\"\n                        >\n                          ${this.description}\n                        </div>\n                      </div>\n                    `\n                  : null}\n                ${!this.hideControls\n                  ? html`\n                      <div class=\"controls\">\n                        ${!this.tableDisabled\n                          ? html`\n                              <button\n                                title=\"Toggle View Mode\"\n                                aria-label=\"Toggle View Mode\"\n                                class=\"view-toggle control-button\"\n                                @click=${() => this.handleViewToggle()}\n                              >\n                                <kd-icon\n                                  .icon=${chartIcon}\n                                  class=\"${!this.tableView ? 'active' : ''}\"\n                                ></kd-icon>\n                                <kd-icon\n                                  .icon=${tableIcon}\n                                  class=\"${this.tableView ? 'active' : ''}\"\n                                ></kd-icon>\n                              </button>\n                            `\n                          : null}\n\n                        <button\n                          title=${this.customLabels.toggleFullscreen}\n                          aria-label=${this.customLabels.toggleFullscreen}\n                          class=\"control-button\"\n                          @click=${() => this.handleFullscreen()}\n                        >\n                          <kd-icon\n                            .icon=${this.fullscreen\n                              ? minimizeIcon\n                              : maximizeIcon}\n                          ></kd-icon>\n                        </button>\n\n                        <div class=\"download\">\n                          <button\n                            title=${this.customLabels.downloadMenu}\n                            aria-label=${this.customLabels.downloadMenu}\n                            class=\"control-button download-button\"\n                          >\n                            <kd-icon .icon=${downloadIcon}></kd-icon>\n                          </button>\n\n                          <div class=\"download-menu\">\n                            ${!this.tableDisabled\n                              ? html`\n                                  <button\n                                    @click=${(e: Event) =>\n                                      this.handleDownloadCsv(e)}\n                                  >\n                                    ${this.customLabels.downloadCsv}\n                                  </button>\n                                `\n                              : null}\n                            <button\n                              @click=${(e: Event) =>\n                                this.handleDownloadImage(e, false)}\n                            >\n                              ${this.customLabels.downloadPng}\n                            </button>\n                            <button\n                              @click=${(e: Event) =>\n                                this.handleDownloadImage(e, true)}\n                            >\n                              ${this.customLabels.downloadJpg}\n                            </button>\n                          </div>\n                        </div>\n\n                        <slot name=\"controls\"></slot>\n                      </div>\n                    `\n                  : null}\n              </div>\n            `\n          : null}\n\n        <slot></slot>\n\n        <figure class=\"${this.tableView ? 'hidden' : ''}\">\n          <div\n            class=\"canvas-container\"\n            style=\"${this.width ? `width: ${this.width}px;` : ''}\n              ${this.height ? `height: ${this.height}px;` : ''}\"\n          >\n            <canvas role=\"img\" aria-labelledby=\"titleDesc\"></canvas>\n          </div>\n          <figcaption>\n            <div\n              class=\"closed-caption ${this.hideCaptions\n                ? 'hidden-visually'\n                : ''}\"\n            ></div>\n          </figcaption>\n        </figure>\n\n        ${!this.tableDisabled && this.tableView\n          ? html`\n              <div class=\"table\">\n                <table>\n                  <thead>\n                    <tr>\n                      ${this.labels.length\n                        ? html`<th>${this.getTableAxisLabel()}</th>`\n                        : null}\n                      ${this.datasets.map((dataset) => {\n                        return html`<th>${dataset.label}</th>`;\n                      })}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    ${this.datasets[0].data.map((_value: any, i: number) => {\n                      return html`\n                        <tr>\n                          ${this.labels.length\n                            ? html`<td>${this.labels[i]}</td>`\n                            : null}\n                          ${this.datasets.map((dataset) => {\n                            const dataPoint = dataset.data[i];\n\n                            if (Array.isArray(dataPoint)) {\n                              // handle data in array format\n                              return html`\n                                <td>${dataPoint[0]}, ${dataPoint[1]}</td>\n                              `;\n                            } else if (\n                              typeof dataPoint === 'object' &&\n                              !Array.isArray(dataPoint) &&\n                              dataPoint !== null\n                            ) {\n                              // handle data in object format\n                              return html`\n                                <td>\n                                  ${Object.keys(dataPoint).map((key) => {\n                                    return html`\n                                      <span>${key}: ${dataPoint[key]}</span>\n                                    `;\n                                  })}\n                                </td>\n                              `;\n                            } else {\n                              // handle data in number/basic format\n                              return html`<td>${dataset.data[i]}</td>`;\n                            }\n                          })}\n                        </tr>\n                      `;\n                    })}\n                  </tbody>\n                </table>\n              </div>\n            `\n          : null}\n      </div>\n    `;\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    const Parent = this;\n    window?.addEventListener(\n      'resize',\n      debounce(() => {\n        Parent._resizeChart();\n      }, 50)\n    );\n  }\n\n  override disconnectedCallback() {\n    const Parent = this;\n    window?.removeEventListener(\n      'resize',\n      debounce(() => {\n        Parent._resizeChart();\n      }, 50)\n    );\n\n    super.disconnectedCallback();\n  }\n\n  private _resizeChart() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n\n  override updated(changedProps: any) {\n    // Update chart instance when data changes.\n    if (\n      this.chart &&\n      (changedProps.has('labels') ||\n        changedProps.has('datasets') ||\n        changedProps.has('options'))\n    ) {\n      this.mergeOptions().then(() => {\n        this.chart.data.labels = this.labels;\n        this.chart.options = this.mergedOptions;\n\n        // remove datasets not in mergedDatasets\n        this.chart.data.datasets.forEach((dataset: any, index: number) => {\n          const NewDataset = this.mergedDatasets.find(\n            (newDataset: any) => newDataset.label === dataset.label\n          );\n\n          if (!NewDataset) {\n            // remove\n            this.chart.data.datasets.splice(index, 1);\n          }\n        });\n\n        // update datasets, add new ones\n        this.mergedDatasets.forEach((dataset: any) => {\n          const OldDataset = this.chart.data.datasets.find(\n            (oldDataset: any) => oldDataset.label === dataset.label\n          );\n\n          if (!OldDataset) {\n            // add new dataset\n            this.chart.data.datasets.push(dataset);\n          } else {\n            // update each key/entry in the dataset object\n            Object.keys(dataset).forEach((key) => {\n              OldDataset[key] = dataset[key];\n            });\n          }\n        });\n\n        this.chart.update();\n      });\n    }\n\n    // init chart\n    // check to make sure initial datasets + data have been provided\n    let hasData = false;\n    if (this.datasets && this.datasets.length) {\n      this.datasets.forEach((dataset) => {\n        hasData = dataset.data.length > 0;\n      });\n    }\n\n    if (!this.chart && this.type && changedProps.has('datasets') && hasData) {\n      this.mergeOptions().then(() => {\n        this.initChart();\n      });\n\n      this.checkType();\n    }\n\n    // Re-init chart instance when type, plugins, colorPalette, width, or height change.\n    if (\n      this.chart &&\n      (changedProps.has('type') ||\n        changedProps.has('plugins') ||\n        changedProps.has('width') ||\n        changedProps.has('height'))\n    ) {\n      this.mergeOptions().then(() => {\n        this.initChart();\n      });\n\n      this.checkType();\n    }\n\n    if (this.chart && changedProps.has('noBorder')) {\n      this.chart.resize();\n    }\n  }\n\n  /**\n   * Initializes a bar chart using the Chart.js library with provided labels, datasets,\n   * and options.\n   */\n  private initChart() {\n    const ignoredTypes = ['choropleth', 'treemap', 'bubbleMap'];\n\n    // Chart.defaults.font.family = getComputedStyle(\n    //   document.documentElement\n    // ).getPropertyValue('--kd-font-family-secondary');\n    Chart.defaults.color =\n      getComputedStyle(document.documentElement).getPropertyValue(\n        '--kd-color-text-primary'\n      ) || '#3d3c3c';\n\n    let plugins = [\n      canvasBackgroundPlugin,\n      doughnutLabelPlugin,\n      ...this.plugins,\n    ];\n\n    // only add certain plugins for standard chart types\n    if (!ignoredTypes.includes(this.type)) {\n      plugins = [\n        ...plugins,\n        a11yPlugin,\n        musicPlugin,\n        annotationPlugin,\n        datalabelsPlugin,\n      ];\n    }\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.chart = new Chart(this.canvas, {\n      type: this.type,\n      data: {\n        labels: this.labels,\n        datasets: this.mergedDatasets,\n      },\n      options: this.mergedOptions,\n      plugins: plugins,\n    });\n  }\n\n  /**\n   * Merges various chart type options and dataset options to create a\n   * final set of options for a chart.\n   */\n  private async mergeOptions() {\n    const radialTypes = ['pie', 'doughnut', 'radar', 'polarArea'];\n    const ignoredTypes = ['choropleth', 'treemap', 'bubbleMap'];\n\n    // get chart types from datasets so we can import additional configs\n    const additionalTypeImports: any = [];\n    this.datasets.forEach((dataset) => {\n      if (dataset.type) {\n        additionalTypeImports.push(\n          import(`../../common/config/chartTypes/${dataset.type}.js`)\n        );\n      }\n    });\n\n    // import main and additional chart type configs\n    const chartTypeConfigs = await Promise.all([\n      import(`../../common/config/chartTypes/${this.type}.js`),\n      ...additionalTypeImports,\n    ]);\n\n    // start with global options\n    let mergedOptions: any = globalOptions(this);\n\n    // merge global type options\n    if (radialTypes.includes(this.type)) {\n      mergedOptions = deepmerge(mergedOptions, globalOptionsRadial(this));\n    } else if (!ignoredTypes.includes(this.type)) {\n      mergedOptions = deepmerge(mergedOptions, globalOptionsNonRadial(this));\n    }\n\n    const mergedDatasets: any = JSON.parse(JSON.stringify(this.datasets));\n\n    chartTypeConfigs.forEach((chartTypeConfig: any) => {\n      // merge all of the imported chart type options with the global options\n      mergedOptions = deepmerge(mergedOptions, chartTypeConfig.options(this));\n\n      // merge all of the imported chart type dataset options\n      mergedDatasets.forEach((dataset: any, index: number) => {\n        if (\n          (!dataset.type && chartTypeConfig.type === this.type) ||\n          dataset.type === chartTypeConfig.type\n        ) {\n          mergedDatasets[index] = deepmerge(\n            dataset,\n            chartTypeConfig.datasetOptions(this, index)\n          );\n        }\n      });\n    });\n\n    if (this.options) {\n      // merge any consumer supplied options with defaults\n      mergedOptions = deepmerge(mergedOptions, this.options);\n    }\n    this.mergedOptions = mergedOptions;\n\n    // merge default chart type dataset options with consumer supplied datasets\n    mergedDatasets.forEach((dataset: object, index: number) => {\n      const customDeepmerge = deepmergeCustom({\n        mergeArrays: false,\n      });\n      mergedDatasets[index] = customDeepmerge(dataset, this.datasets[index]);\n    });\n\n    this.mergedDatasets = mergedDatasets;\n  }\n\n  private getTableAxisLabel() {\n    let label = '';\n\n    if (this.options?.indexAxis === 'y') {\n      if (this.options?.scales?.y?.title?.text) {\n        label = this.options?.scales.y.title.text;\n      } else {\n        label = 'Y Axis';\n      }\n    } else {\n      if (this.options?.scales?.x?.title?.text) {\n        label = this.options?.scales.x.title.text;\n      } else {\n        label = 'X Axis';\n      }\n    }\n\n    return label;\n  }\n\n  private handleViewToggle() {\n    this.tableView = !this.tableView;\n  }\n\n  private checkType() {\n    // chart types that can't have a data table view\n    const blacklist = ['choropleth', 'bubbleMap', 'treemap'];\n    this.tableDisabled = blacklist.includes(this.type);\n  }\n\n  private handleDownloadImage(e: Event, jpeg: boolean) {\n    e.preventDefault();\n\n    const imgFormat = jpeg ? 'image/jpeg' : 'image/png';\n    const fileExt = jpeg ? 'jpg' : 'png';\n    const a = document.createElement('a');\n\n    a.href = this.chart.toBase64Image(imgFormat, 1);\n    a.download = this.chartTitle + '.' + fileExt;\n\n    // trigger the download\n    a.click();\n  }\n\n  private handleDownloadCsv(e: Event) {\n    e.preventDefault();\n    let csv = '';\n\n    for (let i = 0; i < this.chart.data.datasets.length; i++) {\n      csv += convertChartDataToCSV({\n        data: this.chart.data.datasets[i],\n        labels: this.labels,\n      });\n    }\n    if (csv == null) return;\n\n    const filename = this.chartTitle + '.csv';\n    if (!csv.match(/^data:text\\/csv/i)) {\n      csv = 'data:text/csv;charset=utf-8,' + csv;\n    }\n\n    // not sure if anything below this comment works\n    const data = encodeURI(csv);\n    const link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    document.body.appendChild(link); // Required for FF\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  private handleFullscreen() {\n    if (this.shadowRoot?.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      this.container.requestFullscreen();\n    }\n  }\n\n  private handleFullscreenChange() {\n    this.fullscreen = this.shadowRoot?.fullscreenElement !== null;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kd-chart': KDChart;\n  }\n}\n"],"names":[],"sourceRoot":""}